### YamlMime:Course
title: Designing and Implementing Microsoft DevOps solutions
metadata:
  title: 'Course AZ-400T00-A: Designing and Implementing Microsoft DevOps solutions'
  description: 'Course AZ-400T00-A: Designing and Implementing Microsoft DevOps solutions'
uid: course.az-400t00
courseNumber: 'AZ-400T00-A'
hoursToComplete: 120
iconUrl: /media/learn/certification/course.svg
skillsGained:
- skill: 目標とスケジュールを共有して変換を計画する
- skill: プロジェクトを選択し、プロジェクトのメトリクスと KPI を特定する
- skill: チームと機動的な組織構造を構築する
- skill: Source Control を使用する利点を説明する
- skill: TFVC から Git に移行する
- skill: Enterprise DevOps 用に Git を拡張する
- skill: 中間生成物管理ツールとプラクティスを推奨する
- skill: 共有と再利用を可能にする共通パッケージを抽象化する
- skill: アーティファクトを移行して統合する
- skill: ソース規制措置を移行して統合する
- skill: アプリケーション構成と秘密を管理する
- skill: プロジェクト品質戦略を策定する
- skill: 安全な開発プラクティスとコンプライアンス ルールを計画する
- skill: ビルド インフラストラクチャを実装して管理する
- skill: 継続的統合が重要である理由を説明する
- skill: Azure DevOps を使用した継続的統合を実装する
- skill: 技術的負債、SonarCloud、その他のツール ソリューションなど、コード化品質を管理する
- skill: オープンソース、OWASP、WhiteSource Bolt でセキュリティ ポリシーを管理する
- skill: コンテナが仮想マシンとどのように異なるか、また、マイクロサービスがコンテナをどのように使用するかなどを含めて、コンテナ戦略を実装する
- skill: Docker を使用してコンテナを実装する
- skill: 企業基準に合わせるために、オープン ソー スソフトウェア パッケージのセキュリティとライセンスの遵守状況を調査する
- skill: パッケージのセキュリティとライセンスの評価にアクセスするために、ビルド パイプラインを構成する
- skill: パッケージフィードへの安全なアクセスを設定する
- skill: パッケージに変換できるコード依存性を識別するためにコードベースを精査する
- skill: ソリューション全体で標準化されたパッケージ タイプとバージョンを識別し、推奨する
- skill: 既存のビルド パイプラインのリファクタリングを行って、パッケージを公開するバージョン戦略を実装する
- skill: セキュリティとコンプライアンスを管理する
- skill: リリースと展開を区別する
- skill: リリース パイプラインのコンポーネントを定義する
- skill: リリース戦略を設計する際に考慮すべき事項について説明する
- skill: リリース vs リリース プロセスを分類し、両方の品質管理の方法について概説する
- skill: リリースゲートの原理、およびリリース ノートとドキュメンテーションの取り扱い方法について説明する
- skill: 従来の意味と現代的な意味の両方で、展開パターンを説明する
- skill: リリース管理ツールを選択する
- skill: Azure DevOps およびその他のリリース管理ツールで使用される用語について説明する
- skill: ビルドおよびリリース タスクとは何か、何を実行するのか、および使用可能な展開タスクについて説明する
- skill: エージェント、エージェント キュー、およびエージェント プールを分類する
- skill: 1 つのリリース パイプラインで複数のリリースジョブが必要になる場合がある理由について説明する
- skill: マルチ エージェント リリース ジョブとマルチ コンフィギュレーション リリース ジョブを区別する
- skill: リリース パイプラインでリリース変数とステージ変数を使用する
- skill: サービス接続を使用して環境へ安全に展開する
- skill: パイプラインにテストを埋め込む
- skill: アラート、サービス フック、レポートを使用して、パイプラインの健全性を検査し、リリースするさまざまな方法を挙げる
- skill: リリース ゲートを作成する
- skill: 展開パターンについて説明する
- skill: ブルー グリーン展開を実装する
- skill: カナリア リリースを実装する
- skill: プログレッシブ エクスポージャ展開を実装する
- skill: クライアント アプリケーションのクラッシュ レポート統合を設定する
- skill: 監視ダッシュボードとステータス ダッシュボードを開発する
- skill: クライアント アプリケーションのクラッシュ レポート データのルーティングを実装する
- skill: システムの使用状況、機能の使用状況、およびフローを追跡するためのツールを実装する
- skill: チケット システムを開発チームの作業管理と統合して構成する
- skill: モバイル DevOps 戦略を実装する
- skill: コード原則としてインフラストラクチャと構成を適用する。
- skill: ARM テンプレート、PowerShell、Azure CLI などの Microsoft 自動化テクノロジーを使用して、インフラストラクチャを展開して管理する
- skill: Azure で利用できる展開モデルとサービスについて説明する
- skill: 管理 Kubernetes クラスターを展開して構成する
- skill: Chef、Puppet、Ansible、SaltStack、Terraform などのサードパーティ製ツールと Azure サービスを使用して、インフラストラクチャを展開して構成する
- skill: リリース パイプラインおよびアプリケーション インフラストラクチャのためのインフラストラクチャと構成の戦略および適切なツールセットを定義する
- skill: アプリケーション インフラストラクチャにコンプライアンスとセキュリティを実装する
- skill: エンドユーザー満足度を測定するためのプラクティスを設計する
- skill: 外部の情報源からユーザーのフィードバックを収集して分析するためのプロセスを設計する
- skill: クライアント アプリケーションのクラッシュ レポート データの設計ルーティング
- skill: 監視ツールと技術を推奨する
- skill: システムと機能の使用状況追跡ツールを推奨する
- skill: ベースラインを確立するためにアラートを分析する
- skill: テレメトリを分析してベースラインを確立する
- skill: ライブサイト レビューを行い、システム機能停止に対応するフィードバックを取得する
- skill: 意味のない、あるいはアクションを必要としないアラートを低減するための継続的なチューニングを実行する
learningPartnersLink: /learn/certifications/partners
locales:
- en
- ja
- zh-cn
- ko
levels:
- advanced
roles:
- devops-engineer
products:
- azure
- azure-devops
- azure-kubernetes-service
- azure-container-instances
- azure-automation
exams:
- uid: exam.az-400
summary: |-
  本コースでは、DevOps のプロセスとプラクティスを設計および実装するための知識とスキルを提供します。受講者は、DevOps の計画、ソース管理の使用、企業向け Git の拡張、アーティファクトの統合、依存関係管理戦略の設計、秘密情報の管理、継続的統合の実装、コンテナ構築戦略の実装、リリース管理ワークフローの設計、導入パターンの実装、フィードバック メカニズムの最適化などを実行する方法を学習します。

  #### 視聴者プロフィール
  本コースの受講者は、DevOps プロセスの実装に、または Microsoft Azure DevOps Solutions 認定試験合格に関心があります。
prerequisitesSection: |-
  Azure、バージョン管理、アジャイルなソフトウェア開発、およびコア ソフトウェア開発の原則に関する基本的な知識。ソフトウェアを提供する組織における経験があれば、役に立ちます。
outlineSection: |-
  ### Module 1&#58; DevOps の計画
  #### レッスン
  - 変換計画
  - プロジェクトの選択
  - チーム構造
  - Azure DevOps への移行

  #### ラボ&#58; Azure Boards によるアジャイルなプランニングとポートフォリオ管理

  学生はこのモジュールの完了後、次のことができるようになります&#58; 
  - 目標とスケジュールを共有して変換を計画する
  - プロジェクトを選択し、プロジェクトのメトリクスと KPI を特定する
  - チームとアジャイルな組織構造を構築する
  - ツール統合戦略を設計する
  - ライセンス管理戦略を設計する (たとえば VSTS ユーザー)
  - 作業アイテムから動作中のソフトウェアへのエンドツーエンドのトレーサビリティ戦略を設計する
  - 認証およびアクセス戦略を設計する
  - オンプレミスと Cloud 上のリソースの統合戦略を設計する


  ### Module 2&#58; ソース管理の開始
  #### レッスン
  - ソース管理とは
  - ソース管理の利点
  - ソース管理システムのタイプ
  - Azure Repos の概要
  - GitHub の概要
  - Team Foundation Version Control (TFVC) から Azure Repos の Git への移行
  - Azure Repos における Git の認証

  #### ラボ&#58; Git によるバージョン管理

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - Source Control を使用する利点を説明する 
  - Azure Repos と GitHub について説明する
  - TFVC から Git に移行する 


  ### Module 3&#58; エンタープライズ DevOps 用に Git を拡張
  #### レッスン
  - あなたの Git Repo を構成する方法
  - Git ブランチング ワークフロー
  - Azure Repos の プル リクエストで共同作業
  - GitHooks に関心を持つ理由
  - 内部ソースの育成

  #### ラボ&#58; プルリクエストによるコード レビュー

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - Git repos の構築方法について説明する 
  - Git ブランチング ワークフローについて説明する
  - コラボレーションとコード レビューのためにプル リクエストを活用する 
  - 自動化のために Git フックを活用する 
  - 組織全体の内部ソースを育成するために git を使用する


  ### Module 4&#58; アーティファクトの統合および依存関係管理戦略の設計 
  #### レッスン
  - パッケージングの依存関係
  - パッケージ管理
  - アーティファクトの移行と統合

  #### ラボ&#58; パッケージの更新

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - 中間生成物管理ツールとプラクティスを推奨する
  - 共有と再利用を可能にする共通パッケージを抽象化する
  - アーティファクトを移行して統合する
  - ソース規制措置を移行して統合する 


  ### Module 5&#58; Azure パイプラインによる継続的統合の実装
  #### レッスン
  - DevOps におけるパイプラインの概念
  - Azure パイプライン
  - ホスト型エージェント vs プライベート エージェントの使用を評価する
  - エージェント プール
  - パイプラインと並列処理
  - Azure DevOps とオープン ソース プロジェクト (パブリック プロジェクト)
  - Azure Pipelines YAML vs ビジュアル デザイナー
  - 継続的統合の概要
  - ビルド戦略の実装
  - Azure パイプラインとの統合
  - 外部ソース管理を Azure パイプラインと統合する
  - プライベート エージェントを設定する
  - Docker マルチ ステージ ビルドを分析して統合する

  #### ラボ&#58; Azure パイプラインによる継続的統合の有効化

  #### ラボ&#58; 外部ソース管理と Azure パイプラインとの統合

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - ビルド インフラストラクチャを実装して管理する
  - 継続的統合が重要である理由を説明する
  - Azure DevOps を使用した継続的統合を実装する


  ### Module 6&#58; アプリケーション構成と秘密の管理 
  #### レッスン
  - セキュリティの概要
  - 安全でコンプライアンス準拠した開発プロセスを実施する
  - アプリケーション構成データの再検討
  - 秘密、トークン、および証明書を管理する
  - パイプラインにおけるセキュリティとコンプライアンスを管理するためのツールを実装する 

  #### ラボ&#58; Azure Key Vault と Azure DevOps の統合

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - アプリケーション構成と秘密を管理する
  - パイプラインにおけるセキュリティとコンプライアンスを管理するためのツールを実装する


  ### Module 7&#58; コードの品質とセキュリティ ポリシーの管理
  #### レッスン
  - コード品質の管理
  - ポリシー セキュリティの管理

  #### ラボ&#58; Azure DevOps と SonarCloud による技術的債務の管理

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - 技術的負債、SonarCloud、その他のツール ソリューションなど、コード化品質を管理する
  - オープン ソースと OWASP を使用してセキュリティ ポリシーを管理する


  ### Module 8&#58; コンテナ ビルド戦略の実装
  #### レッスン
  - コンテナ ビルド戦略の実装

  #### ラボ&#58; Existing ASP.NET Apps を Azure で最新化

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - コンテナが仮想マシンとどのように異なるか、また、マイクロサービスがコンテナをどのように使用するかなどを含めて、コンテナ戦略を実装する
  - Docker を使用してコンテナを実装する


  ### Module 9&#58; アーティファクトのバージョン管理、セキュリティ、コンプライアンスを管理
  #### レッスン
  - パッケージ セキュリティ
  - オープン ソース ソフトウェア
  - ライセンス スキャンと脆弱性スキャンの統合
  - バージョン管理戦略を実装する 

  #### ラボ&#58; WhiteSource によるオープン ソース セキュリティおよびライセンスの管理

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - 企業基準に合わせるために、オープン ソー スソフトウェア パッケージのセキュリティとライセンスの遵守状況を調査する
  - パッケージのセキュリティとライセンスの評価にアクセスするために、ビルド パイプラインを構成する
  - パッケージフィードへの安全なアクセスを設定する
  - パッケージに変換できるコード依存性を識別するためにコードベースを精査する
  - ソリューション全体で標準化されたパッケージ タイプとバージョンを識別し、推奨する
  - 既存のビルド パイプラインのリファクタリングを行って、パッケージを公開するバージョン戦略を実装する
  - セキュリティとコンプライアンスを管理する


  ### Module 10&#58; リリース戦略の設計
  #### レッスン
  - 継続的デリバリーの概要
  - リリース戦略の推奨事項
  - 高品質なリリース パイプラインの構築
  - 展開パターンの選択
  - リリース管理ツールの選択 

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - リリースと展開を区別する
  - リリース パイプラインのコンポーネントを定義する
  - リリース戦略を設計する際に考慮すべき事項について説明する
  - リリース vs リリース プロセスを分類し、両方の品質管理の方法について概説する
  - リリース ゲートの原理、およびリリース ノートとドキュメンテーションの取り扱い方法について説明する
  - 従来の意味と現代的な意味の両方で、展開パターンを説明する
  - リリース管理ツールを選択する


  ### Module 11&#58; リリース管理ワークフローのセットアップ
  #### レッスン
  - リリース パイプラインを作成する
  - 環境をプロビジョニングして設定する
  - タスクとテンプレートを管理してモジュール化する
  - 秘密事項をリリース パイプラインと統合する
  - 自動統合と機能テスト自動化を構成する
  - 健康検査を自動化する

  #### ラボ&#58; YAML でパイプラインをコードとして構成

  #### ラボ&#58; Azure Key ボールトを使用してパイプラインにおける秘密事項を設定

  #### ラボ&#58; 機能テストのセットアップと実行 

  #### ラボ&#58; リリース ゲートとして Azure Monitor を使用

  #### ラボ&#58; リリース ダッシュボードの作成

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - Azure DevOps およびその他のリリース管理ツールで使用される用語について説明する
  - ビルドおよびリリース タスクとは何か、何を実行するのか、および使用可能な展開タスクについて説明する
  - エージェント、エージェント キュー、およびエージェント プールを分類する
  - 1 つのリリース パイプラインで複数のリリース ジョブが必要になる場合がある理由について説明する
  - マルチ エージェント リリース ジョブとマルチ コンフィギュレーション リリース ジョブを区別する
  - リリース パイプラインでリリース変数とステージ変数を使用する
  - サービス接続を使用して環境へ安全に展開する
  - パイプラインにテストを埋め込む
  - アラート、サービス フック、レポートを使用して、パイプラインの健全性を検査し、リリースするさまざまな方法を挙げる
  - リリース ゲートを作成する


  ### Module 12&#58; 最適なデプロイメント パターンの実装
  #### レッスン
  - 展開パターンの概要
  - ブルー グリーン展開を実装する
  - フィーチャー トグル
  - カナリア リリース
  - ダーク ローンチング
  - AB テスト
  - プログレッシブ エクスポージャ展開

  #### ラボ&#58; LaunchDarkly と Azure DevOps による機能フラグ管理

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - 展開パターンについて説明する
  - ブルー グリーン展開を実装する
  - カナリア リリースを実装する
  - プログレッシブ エクスポージャ展開を実装する


  ### Module 13&#58; システム フィードバックを開発チームに送るプロセスの実装
  #### レッスン
  - システムの使用状況、機能の使用状況、およびフローを追跡するためのツールを実装する
  - モバイルト アプリケーションのクラッシュ レポート データのルーティングを実装する
  - 監視ダッシュボードとステータス ダッシュボードを開発する
  - チケット システムの統合して構成する

  #### ラボ&#58; アプリケーション パフォーマンスの監視

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - クライアントアプリケーションのクラッシュ レポート統合を設定する
  - 監視ダッシュボードとステータス ダッシュボードを開発する
  - クライアント アプリケーションのクラッシュ レポート データのルーティングを実装する
  - システムの使用状況、機能の使用状況、およびフローを追跡するためのツールを実装する
  - チケット システムを開発チームの作業管理と統合して構成する


  ### Module 14&#58; インフラストラクチャおよび構成 Azure ツール
  #### レッスン
  - コードおよび構成管理としてのインフラストラクチャ
  - ARM テンプレートを使用して Azure リソースを作成する
  - Azure CLI を使用して Azure リソースを作成する
  - Azure PowerShell を使用して Azure リソースを作成する
  - 所望状態の構成 (DSC)
  - DevOps による Azure 自動化
  - その他の自動化ツール 

  #### ラボ&#58; リソース マネージャ テンプレート使用による Azure 展開

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - コード原則としてインフラストラクチャと構成を適用する
  - ARM テンプレート、PowerShell、Azure CLI などの Microsoft 自動化テクノロジーを使用して、インフラストラクチャを展開して管理する


  ### Module 15&#58; Azure 展開モデルとサービス
  #### レッスン
  - 展開モジュールとオプション
  - Azure Infrastructure-as-a-Service (IaaS) サービス
  - Azure Platform-as-a-Service (PaaS) サービス
  - サーバーレスおよび HPC コンピュータ サービス
  - Azure Service Fabric 

  #### ラボ&#58; Docker 化された Java アプリを Azure Web App for Containers にデプロイする

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - Azure で利用できる展開モデルとサービスについて説明する


  ### Module 16&#58; Kubernetes サービス インフラストラクチャの作成と管理
  #### レッスン
  - Azure Kubernetes Service

  #### ラボ&#58; コンテナ アプリケーションを Azure Kubernetes Service に展開

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - 管理 Kubernetes クラスターを展開して構成する


  ### Module 17&#58; Azure で利用可能なコード ツールとしてのサードパーティ インフラストラクチャ
  #### レッスン
  - Chef
  - Puppet
  - Ansible
  - Terraform

  #### ラボ&#58; コードとしてのインフラストラクチャ

  #### ラボ&#58; Terraform と Azure Pipelines を使用して、クラウドでのインフラストラクチャ展開を自動化する

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - Chef、Puppet、Ansible、Terraform などのサードパーティ製ツールと Azure サービスを使用して、インフラストラクチャを展開して構成する


  ### Module 18&#58; インフラストラクチャへのコンプライアンスとセキュリティの実装
  #### レッスン
  - DevOps によるセキュリティとコンプライアンスの原則
  - Azure セキュリティ センター 

  #### ラボ&#58; Azure DevOps パイプラインへのセキュリティおよびコンプライアンスの実装

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - リリース パイプラインおよびアプリケーション インフラストラクチャのためのインフラストラクチャと構成の戦略および適切なツール セットを定義する
  - アプリケーション インフラストラクチャにコンプライアンスとセキュリティを実装する


  ### Module 19&#58; システムのフィードバック メカニズムの推奨および設計
  #### レッスン
  - 内部ループ
  - 継続的な実験的マインドセット
  - エンドユーザー満足度を測定するためのプラクティスを設計する
  - ユーザーのフィードバックを収集して分析するためのプロセスを設計する
  - アプリケーション分析を自動化するプロセスを設計する 

  #### ラボ&#58; Azure DevOps と Teams の統合

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - エンドユーザー満足度を測定するためのプラクティスを設計する
  - 外部の情報源からユーザーのフィードバックを収集して分析するためのプロセスを設計する
  - クライアント アプリケーションのクラッシュ レポート データの設計ルーティング
  - 監視ツールと技術を推奨する
  - システムと機能の使用状況追跡ツールを推奨する


  ### Module 20&#58; フィードバック メカニズムの最適化
  #### レッスン
  - サイト リライアビリティ エンジニアリング
  - テレメトリを分析してベースラインを確立する
  - 意味のない、あるいはアクションを必要としないアラートを低減するための継続的なチューニングを実行する
  - ベースラインを確立するためにアラートを分析する
  - 非難のない回顧と公正な文化 

  学生はこのモジュールの完了後、次のことができるようになります&#58;
  - ベースラインを確立するためにアラートを分析する
  - テレメトリを分析してベースラインを確立する
  - ライブサイト レビューを行い、システム機能停止に対応するフィードバックを取得する
  - 意味のない、あるいはアクションを必要としないアラートを低減するための継続的なチューニングを実行する

